<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/Viraj/Downloads/db.sqlite" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser query pragmas" current="1"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="125"/><column_width id="3" width="1571"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,8:maininvoices"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="customers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="4" mode="0"/></sort><column_widths><column index="1" value="120"/><column index="2" value="154"/><column index="3" value="68"/><column index="4" value="59"/><column index="5" value="78"/><column index="6" value="300"/><column index="7" value="251"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="invoices" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="1" mode="1"/></sort><column_widths><column index="1" value="91"/><column index="2" value="68"/><column index="3" value="251"/><column index="4" value="154"/><column index="5" value="251"/><column index="6" value="52"/><column index="7" value="154"/><column index="8" value="154"/><column index="9" value="65"/><column index="10" value="251"/></column_widths><filter_values><column index="4" value="2018-12"/></filter_values><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="subscriptions" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="8" mode="0"/></sort><column_widths><column index="1" value="154"/><column index="2" value="240"/><column index="3" value="248"/><column index="4" value="154"/><column index="5" value="154"/><column index="6" value="251"/><column index="7" value="251"/><column index="8" value="94"/><column index="9" value="56"/><column index="10" value="65"/><column index="11" value="154"/><column index="12" value="57"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="Q1">-- Retrieve monthly revenue for each plan type for the year 2018

SELECT
    -- Extract month from the invoice date
    strftime('%m', invoices.date) AS Month,
    
    -- Get the plan type
    subscriptions.plan_id AS Plan,
    
    -- Calculate total revenue, considering only paid invoices
    SUM(CASE WHEN invoices.paid = 1 THEN invoices.amount_due ELSE 0 END) AS TotalRevenue
FROM 
    invoices
    -- Joining with subscriptions to get the plan type
    JOIN subscriptions 
    ON subscriptions.id = invoices.subscription_id
WHERE 
    -- Filter for invoices from the year 2018
    strftime('%Y', invoices.date) = '2018'
GROUP BY
    Month,
    subscriptions.plan_id;

</sql><sql name="Q2">-- Define the number of subscriptions created each month
WITH CreatedSubscriptions AS (
    SELECT 
        subscriptions.plan_id,
        strftime('%m', subscriptions.created) AS Month,
        COUNT(*) AS created_count
    FROM 
        subscriptions
    WHERE
        strftime('%Y', subscriptions.created) = '2018'
    GROUP BY
        subscriptions.plan_id,
        Month
),
-- Define the number of subscriptions canceled each month
CanceledSubscriptions AS (
    SELECT 
        subscriptions.plan_id,
        strftime('%m', subscriptions.canceled_at) AS Month,
        COUNT(*) AS canceled_count
    FROM 
        subscriptions
    WHERE
        strftime('%Y', subscriptions.canceled_at) = '2018'
    GROUP BY
        subscriptions.plan_id,
        Month
)

-- Calculate the churn rate for each month and plan
SELECT 
    CreatedSubscriptions.Month AS Month,
    CreatedSubscriptions.plan_id as Plan,
    CreatedSubscriptions.created_count AS Created,
    -- Handle both NULL and 'None' values for canceled_count
    CASE
        WHEN CanceledSubscriptions.canceled_count IS NULL OR CanceledSubscriptions.canceled_count = 'None' THEN 0
        ELSE CanceledSubscriptions.canceled_count
    END AS Cancelled,
    -- Calculate the churn rate
    ROUND(
        CASE
            WHEN CreatedSubscriptions.Month = '01' THEN
                (CAST(IFNULL(CanceledSubscriptions.canceled_count, 0) AS FLOAT) * 100 / CreatedSubscriptions.created_count)
            ELSE
                (CAST(IFNULL(CanceledSubscriptions.canceled_count, 0) AS FLOAT) / 
                (SUM(CreatedSubscriptions.created_count - IFNULL(CanceledSubscriptions.canceled_count, 0)) OVER (PARTITION BY CreatedSubscriptions.plan_id ORDER BY CreatedSubscriptions.month ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) + CreatedSubscriptions.created_count)) * 100
        END, 2
    ) AS [ChurnRate (%)]
FROM 
    CreatedSubscriptions
-- Join the created and canceled data based on month and plan
LEFT JOIN 
    CanceledSubscriptions 
ON 
    CreatedSubscriptions.plan_id = CanceledSubscriptions.plan_id 
    AND CreatedSubscriptions.Month = CanceledSubscriptions.Month
ORDER BY
    CreatedSubscriptions.Month,
    CreatedSubscriptions.plan_id;
</sql><sql name="Q3">-- Create a table to aggregate monthly revenue and count of paying accounts
WITH MonthlyRevenueTable AS (
    -- Extract month from the invoice date and group the total revenue by month and plan
    SELECT
        strftime('%m', invoices.date) AS Month,
        subscriptions.plan_id,
        -- Sum only the amount of invoices that are paid
        SUM(CASE WHEN invoices.paid = 1 THEN invoices.amount_due ELSE 0 END) AS total_revenue,
        COUNT(CASE WHEN invoices.paid = 1 THEN invoices.date END) AS total_paying_accounts
    FROM invoices
    JOIN subscriptions 
        ON subscriptions.id = invoices.subscription_id
    WHERE strftime('%Y', invoices.date) = '2018'
    GROUP BY
        Month,
        subscriptions.plan_id
),

-- Table to count the number of created subscriptions by month and plan
CreatedSubscriptions AS (
    SELECT 
        subscriptions.plan_id,
        strftime('%m', subscriptions.created) AS Month,
        COUNT(*) AS created_count
    FROM subscriptions
    WHERE strftime('%Y', subscriptions.created) = '2018'
    GROUP BY
        subscriptions.plan_id,
        Month
),

-- Table to count the number of cancelled subscriptions by month and plan
CanceledSubscriptions AS (
    SELECT 
        subscriptions.plan_id,
        strftime('%m', subscriptions.canceled_at) AS Month,
        COUNT(*) AS canceled_count
    FROM subscriptions
    WHERE strftime('%Y', subscriptions.canceled_at) = '2018'
    GROUP BY
        subscriptions.plan_id,
        Month
)

-- Main query to bring together the above tables and calculate Churn Rate and Lifetime Value
SELECT 
    CreatedSubscriptions.Month AS Month,
    CreatedSubscriptions.plan_id AS Plan,
    MonthlyRevenueTable.total_revenue AS MonthlyRevenue,
    MonthlyRevenueTable.total_paying_accounts AS TotalPayingAccounts,

    -- Calculate churn rate
    ROUND(
        CASE
            WHEN CreatedSubscriptions.month = '01' THEN
                CAST(IFNULL(CanceledSubscriptions.canceled_count, 0) AS FLOAT) * 100 / CreatedSubscriptions.created_count
            ELSE
                CAST(IFNULL(CanceledSubscriptions.canceled_count, 0) AS FLOAT) / (SUM(CreatedSubscriptions.created_count - IFNULL(CanceledSubscriptions.canceled_count, 0)) OVER (PARTITION BY CreatedSubscriptions.plan_id ORDER BY CreatedSubscriptions.month ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) + CreatedSubscriptions.created_count) * 100
        END, 2) AS [ChurnRate (%)],

    -- Calculate Lifetime Value
    ROUND(
        (MonthlyRevenueTable.total_revenue / MonthlyRevenueTable.total_paying_accounts) / 
        (
            CASE
                WHEN CreatedSubscriptions.month = '01' THEN
                    CAST(IFNULL(CanceledSubscriptions.canceled_count, 0) AS FLOAT) * 100 / CreatedSubscriptions.created_count
                ELSE
                    CAST(IFNULL(CanceledSubscriptions.canceled_count, 0) AS FLOAT) / (SUM(CreatedSubscriptions.created_count - IFNULL(CanceledSubscriptions.canceled_count, 0)) OVER (PARTITION BY CreatedSubscriptions.plan_id ORDER BY CreatedSubscriptions.month ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) + CreatedSubscriptions.created_count) * 100
            END / 100
        ), 2) AS [LifetimeValue ($)]

-- Join tables together on common columns
FROM CreatedSubscriptions
LEFT JOIN CanceledSubscriptions 
    ON CreatedSubscriptions.plan_id = CanceledSubscriptions.plan_id 
    AND CreatedSubscriptions.month = CanceledSubscriptions.month
LEFT JOIN MonthlyRevenueTable 
    ON CreatedSubscriptions.plan_id = MonthlyRevenueTable.plan_id 
    AND CreatedSubscriptions.month = MonthlyRevenueTable.month
-- Sort by month and plan
ORDER BY
    CreatedSubscriptions.month,
    CreatedSubscriptions.plan_id;
</sql><current_tab id="2"/></tab_sql></sqlb_project>
